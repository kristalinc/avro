##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## Modifications by Duane Moore, Clover, Aug 2013

#if ($this.getNamespace($schema))
package $this.getNamespace($schema);
#end

@SuppressWarnings("all")
#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
public class ${this.mangle($schema.getName())} implements android.os.Parcelable {

  protected String jsonString = null;
  protected org.json.JSONObject jsonObject = null;

#if ($schema.getFields().size() > 0)
  public ${this.mangle($schema.getName())}(String json, boolean ignore) {
    this.jsonString = json;
  }

  public ${this.mangle($schema.getName())}(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

#if ($this.getSettableFields($schema).size() == $schema.getFields().size())#else
  public ${this.mangle($schema.getName())}(#foreach($field in $this.getSettableFields($schema))${this.javaType($field.schema())} ${this.mangle($field.name())}#if($velocityCount < $this.getSettableFields($schema).size()), #end#end) throws org.json.JSONException {
#foreach ($field in $this.getSettableFields($schema))
#if (${this.isRequiredOnCreate($field)})
    if (${this.mangle($field.name())} == null) throw new IllegalArgumentException("'${this.mangle($field.name())}' is required to be non-null");
#end
#end
#foreach ($field in $this.getSettableFields($schema))
    ${this.generateSetMethod($schema, $field)}(${this.mangle($field.name())});
#end
  }

#end
  public ${this.mangle($schema.getName())}(#foreach($field in $schema.getFields())${this.javaType($field.schema())} ${this.mangle($field.name())}#if($velocityCount < $schema.getFields().size()), #end#end) throws org.json.JSONException {
#foreach ($field in $schema.getFields())
#if (${this.isRequiredOnCreate($field)})
    if (${this.mangle($field.name())} == null) throw new IllegalArgumentException("'${this.mangle($field.name())}' is required to be non-null");
#end
#end
#foreach ($field in $schema.getFields())
    ${this.generateSetMethod($schema, $field)}(${this.mangle($field.name())});
#end
  }
#end

  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = (org.json.JSONObject) new org.json.JSONTokener(jsonString).nextValue();
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      // print some kind of error
    }
    return jsonObject;
  }

#if ($this.getRequiredFields($schema).size() > 0)
  public void validate() throws org.json.JSONException {
#foreach ($field in $this.getRequiredFields($schema))#if (${this.isRequiredOnCreate($field)})
    if (${this.generateGetMethod($schema, $field)}() == null) throw new IllegalArgumentException("'${this.mangle($field.name())}' is required to be non-null");
#end#end
#foreach ($field in $schema.getFields())
#if (${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})})
  ${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())} = ${this.generateGetMethod($schema, $field)}();
  ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
#end
#end
    // TODO: also validate string length, valid ranges and other integrity checks
}
#end

#foreach ($field in $schema.getFields())
#if ($field.doc())
  /**
   * $field.doc()
   */
#end
#if (${this.isArray($field.schema())})
  public java.util.List<${this.javaType($field.schema().getElementType())}> ${this.generateGetMethod($schema, $field)}() {
    java.util.List<${this.javaType($field.schema().getElementType())}> itemList = null;
    if (getJSONObject().has("${this.mangle($field.name(), $schema.isError())}")) {
      itemList = new java.util.ArrayList<${this.javaType($field.schema().getElementType())}>();
      org.json.JSONArray itemArray = getJSONObject().optJSONArray("${this.mangle($field.name(), $schema.isError())}");
      for (int i = 0; i < itemArray.length(); i++) {
#if (${this.isRecord($field.schema())})
        org.json.JSONObject obj = itemArray.optJSONObject(i);
        ${this.javaType($field.schema().getElementType())} item = new ${this.javaType($field.schema().getElementType())}(obj);
#else
        ${this.javaType($field.schema().getElementType())} item = itemArray.${this.jsonAccessor($field.schema().getElementType())}(i);
#end
        itemList.add(item);
      }
    }
    return itemList;
  }
#elseif (${this.isEnum($field.schema())})
  public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
    ${this.javaType($field.schema())}[] enumValues = ${this.javaType($field.schema())}.class.getEnumConstants();
    // from last to first, so that in case of duplicate values, first wins
    for (int i = enumValues.length; --i >= 0; ) {
      ${this.javaType($field.schema())} e = enumValues[i];
      if (e.toString().equals(getJSONObject().optString("${this.mangle($field.name(), $schema.isError())}"))) {
        return e;
      }
    }
    // throw exception or return null?
    return null;
  }
#elseif (${this.isRecord($field.schema())})
  public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
    org.json.JSONObject jsonObj = getJSONObject().${this.jsonAccessor($field.schema())}("${this.mangle($field.name(), $schema.isError())}"${this.jsonFallback($field)});
    if (jsonObj != null) {
      return new ${this.javaType($field.schema())}(getJSONObject().${this.jsonAccessor($field.schema())}("${this.mangle($field.name(), $schema.isError())}"${this.jsonFallback($field)}));
    }
    return null;
  }
#else
  public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
    return ${this.generateHasMethod($schema, $field)}() ?
      getJSONObject().${this.jsonAccessor($field.schema())}("${this.mangle($field.name(), $schema.isError())}"${this.jsonFallback($field)}) : null;
  }
#end

#end

#foreach ($field in $schema.getFields())
  /** Checks whether the '${this.mangle($field.name(), $schema.isError())}' field has been set */
  public boolean ${this.generateHasMethod($schema, $field)}() {
    return getJSONObject().has("${this.mangle($field.name(), $schema.isError())}");
  }
#end

#if (${this.isCreateSetters()})
#foreach ($field in $schema.getFields())
  public void ${this.generateSetMethod($schema, $field)}(${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())}) throws org.json.JSONException {
#if (${this.isArray($field.schema())})
    if (${this.mangle($field.name(), $schema.isError())} != null) {
      org.json.JSONArray array = new org.json.JSONArray();
      for (${this.javaType($field.schema().getElementType())} obj : ${this.mangle($field.name(), $schema.isError())}) {
#if (${this.isString($field.schema().getElementType())})
        array.put(obj.toString());
#else
        array.put(obj.getJSONObject());
#end
      }
      getJSONObject().put("${this.mangle($field.name(), $schema.isError())}", array);
    }
#else
    ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
    try {
#if (${this.isRecord($field.schema())})
      getJSONObject().put("${this.mangle($field.name(), $schema.isError())}", ${this.mangle($field.name(), $schema.isError())}.getJSONObject());
#else
      getJSONObject().put("${this.mangle($field.name(), $schema.isError())}", ${this.mangle($field.name(), $schema.isError())});
#end
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
#end
  }
#end
#end


  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    String json = jsonString != null ? jsonString : getJSONObject().toString();
    dest.writeString(json);
  }

  public static final android.os.Parcelable.Creator<${this.mangle($schema.getName())}> CREATOR = new android.os.Parcelable.Creator<${this.mangle($schema.getName())}>() {
    public ${this.mangle($schema.getName())} createFromParcel(android.os.Parcel in) {
      String json = in.readString();
      return new ${this.mangle($schema.getName())}(json, true);
    }

    public ${this.mangle($schema.getName())}[] newArray(int size) {
      return new ${this.mangle($schema.getName())}[size];
    }
  };

## Builder interface
public static class Builder {

#foreach ($field in $schema.getFields())
#foreach ($annotation in $this.javaAnnotations($field)) @$annotation #end
#if (${this.isReadOnly($field)})#else
  private ${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())};
#end#end

  public Builder() {}

#foreach ($field in $schema.getFields())
#if (${this.isReadOnly($field)})#else
  public Builder ${this.generateBuilderMethod($schema, $field)}(${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())}) {
    ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
    this.${this.mangle($field.name(), $schema.isError())} = ${this.mangle($field.name(), $schema.isError())};
    return this;
  }
#end#end

  public ${this.mangle($schema.getName())} build() throws org.json.JSONException {
    return new ${this.mangle($schema.getName())} (#foreach($field in $this.getSettableFields($schema))${this.mangle($field.name())}#if($velocityCount < $this.getSettableFields($schema).size()), #end#end);
  }
}

}
