##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## Modifications by Duane Moore, Clover, Aug 2013
#if ($schema.getNamespace())
package com.clover.server.data.$schema.getNamespace();
#end


#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
@SuppressWarnings("all")
public class ${this.mangle($schema.getName())} extends com.clover.message.Message {
  private final java.lang.Long id;
#foreach ($field in $schema.getFields())
  private final ${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())};
#end

#if ($schema.getFields().size() > 0)

  public ${this.mangle($schema.getName())}(
        @com.fasterxml.jackson.annotation.JsonProperty("serverId")  java.lang.Long id,
#foreach($field in $schema.getFields())
        @com.fasterxml.jackson.annotation.JsonProperty("$field.name()") ${this.javaType($field.schema())} ${this.mangle($field.name())}#if($velocityCount < $schema.getFields().size()), #else)#end

#end  {
    this.id = id;
#foreach ($field in $schema.getFields())
#if ($this.isArray($field))
    this.${this.mangle($field.name())} = toImmutableList(${this.mangle($field.name())});
#else
    this.${this.mangle($field.name())} = ${this.mangle($field.name())};
#end
#end
  }
#end

  @com.fasterxml.jackson.annotation.JsonIgnore
  public Long getId() {
    return id;
  }

#foreach ($field in $schema.getFields())
#if ($field.doc())
  /**
  * $field.doc()
  **/
#end
#if ($field.name() == "id")  @com.fasterxml.jackson.annotation.JsonProperty("id")
#end
  public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
    return ${this.mangle($field.name(), $schema.isError())};
  }

#end

  public void validate() {
#foreach ($field in $this.getRequiredFields($schema))#if (${this.isRequiredOnCreate($field)})
    if (${this.generateGetMethod($schema, $field)}() == null) throw new IllegalArgumentException("'${this.mangle($field.name())}' is required to be non-null");
#end#end
#foreach ($field in $schema.getFields())
#if($this.generateValidityCheck($field, "").length() > 10)
    ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
#end
#end
  }

  public void encode(com.clover.message.Encoder encoder) {
      encoder.registerMessage(this);
#foreach ($field in $schema.getFields())
#if ($this.isArray($field))
    encoder.writeList("$field.name()", ${this.mangle($field.name())});
#else
    encoder.write("$field.name()", ${this.mangle($field.name())});
#end
#end
    encoder.endMessage(this);
  }


  public java.lang.String toString(com.clover.message.Encoder encoder) {
    encode(encoder);
    return encoder.toString();
  }


## Builder
  public static class Builder extends com.clover.message.Message.Builder<${this.mangle($schema.getName())}> {
    java.lang.Long id;
#foreach ($field in $schema.getFields())
    ${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())};
#end

    public Builder() {}

    public Builder(Builder other) {
      this.id = other.id;
#foreach ($field in $schema.getFields())
      this.${this.mangle($field.name(), $schema.isError())} = other.${this.mangle($field.name(), $schema.isError())};
#end
    }

    public Builder(${this.mangle($schema.getName())} obj) {
      this.id = obj.getId();
#foreach ($field in $schema.getFields())
      this.${this.mangle($field.name(), $schema.isError())} = obj.${this.generateGetMethod($schema, $field)}();
#end
    }

    public Builder id(java.lang.Long id) {
      this.id = id;
      return this;
    }

#foreach ($field in $schema.getFields())
    @com.fasterxml.jackson.annotation.JsonProperty("$field.name()")
    public Builder ${this.generateBuilderMethod($schema, $field)}(${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())}) {
#if ( $this.generateValidityCheck($field, "").length() > 10)
      ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
#end
      this.${this.mangle($field.name(), $schema.isError())} = ${this.mangle($field.name(), $schema.isError())};
      return this;
    }

#if($this.isRecord($field))
    public Builder ${this.generateBuilderMethod($schema, $field)}(com.clover.message.Message.Builder<${this.javaType($field.schema())}> ${this.mangle($field.name(), $schema.isError())}Builder) {
#if ( $this.generateValidityCheck($field, "").length() > 10)
      ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
#end
      this.${this.mangle($field.name(), $schema.isError())} = ${this.mangle($field.name(), $schema.isError())}Builder.build();
      return this;
    }
#end
#end

    public ${this.mangle($schema.getName())} build() {
      return new ${this.mangle($schema.getName())}(id, #foreach($field in $schema.getFields())${this.mangle($field.name())}#if($velocityCount < $schema.getFields().size()), #end#end);
    }
  }
}
