##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## Modifications by Duane Moore, Clover, Aug 2013

#if ($schema.getNamespace())
package $schema.getNamespace();
#end

#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
##@com.clover.core.data.DatabaseTable(tableName = "#if($schema.getProp("table_name"))$schema.getProp("table_name")#else$schema.getName()#end")
@SuppressWarnings("all")
public class ${this.mangle($schema.getName())} {

#foreach ($field in $schema.getFields())
#if(! $field.getProp("hide_from_client"))
#foreach ($annotation in $this.javaAnnotations($field)) @$annotation #end
#if (!$field.getProp("notSql"))
##  @com.clover.core.data.Column(name = "#if($field.getProp("sql_name"))$field.getProp("sql_name")#else${this.camelCaseToUnderscore($field.name())}#end" #if($field.getProp("sql_table")), remote=true, remoteTableName="$field.getProp("sql_table")"#end)
#end
  private final ${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())};
#if ($this.renamedFrom($field))

  @Deprecated
  private final ${this.javaType($field.schema())} ${this.mangle($this.renamedFrom($field), $schema.isError())};
#end#end

#end

#if ($schema.getFields().size() > 0)

  public ${this.mangle($schema.getName())}(
#foreach($field in $schema.getFields())
    @org.codehaus.jackson.annotate.JsonProperty("${this.mangle($field.name())}") ${this.javaType($field.schema())} ${this.mangle($field.name())}#if($velocityCount < $schema.getFields().size()), #else)#end

#end {
#foreach ($field in $schema.getFields())
    this.${this.mangle($field.name())} = ${this.mangle($field.name())};
#if ($this.renamedFrom($field))
    this.${this.mangle($this.renamedFrom($field))} = ${this.mangle($field.name())};
#end
#end
  }
#end

#foreach ($field in $schema.getFields())
#if(!$field.getProp("hide_from_client"))
#if ($field.doc())
  /**
   * $field.doc()
   **/
#end
  public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
    return ${this.mangle($field.name(), $schema.isError())};
  }

#if ($this.renamedFrom($field))
  @Deprecated
  public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $this.renamedFrom($field))}() {
    return ${this.mangle($this.renamedFrom($field), $schema.isError())};
  }
#end
#end
#end

  public void validate() {
#foreach ($field in $this.getRequiredFields($schema))#if (${this.isRequiredOnCreate($field)})
  #if(! $field.getProp("hide_from_client"))
  if (${this.generateGetMethod($schema, $field)}() == null) throw new IllegalArgumentException("'${this.mangle($field.name())}' is required to be non-null");
#end#end#end
#foreach ($field in $schema.getFields())
#if(! $field.getProp("hide_from_client") && $this.generateValidityCheck($field, "").length() > 10)
    ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
#end
#end
}


## Builder interface
  public static class Builder {
#foreach ($field in $schema.getFields())
#foreach ($annotation in $this.javaAnnotations($field)) @$annotation #end
    ${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())};
#end

    public Builder() {}

    public Builder(Builder other) {
#foreach ($field in $schema.getFields())
      this.${this.mangle($field.name(), $schema.isError())} = other.${this.mangle($field.name(), $schema.isError())};
#end
    }

    public Builder(${this.mangle($schema.getName())} obj) {
#foreach ($field in $schema.getFields())
      this.${this.mangle($field.name(), $schema.isError())} = obj.${this.generateGetMethod($schema, $field)}();
#end
    }

#foreach ($field in $schema.getFields())
#if (${this.isReadOnly($field)})#else
    public Builder ${this.generateBuilderMethod($schema, $field)}(${this.javaType($field.schema())} ${this.mangle($field.name(), $schema.isError())}) {
#if ( $this.generateValidityCheck($field, "").length() > 10)
      ${this.generateValidityCheck($field, ${this.mangle($field.name(), $schema.isError())})}
#end
      this.${this.mangle($field.name(), $schema.isError())} = ${this.mangle($field.name(), $schema.isError())};
      return this;
    }

#end#end
    public ${this.mangle($schema.getName())} build() {
      return new ${this.mangle($schema.getName())}(#foreach($field in $schema.getFields())${this.mangle($field.name())}#if($velocityCount < $schema.getFields().size()), #end#end);
    }
  }
}
